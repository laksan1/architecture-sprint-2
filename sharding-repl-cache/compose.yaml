name: sharding-repl-cache
services:
  #сервер конфигурации
  configSrv:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
    command: [
        "--configsvr", #запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017",
      ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  #1-й шард Replica Primary
  shard1_1:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard1_1
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    volumes:
      - shard1_1-data:/data/db
    command: [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1-replica-set", #название реплики
        "--bind_ip_all",
        "--port",
        "27018",
      ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  #1-й шард Replica Secondary 1
  shard1_2:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard1_2
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - shard1_2-data:/data/db
    command: [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1-replica-set", #название реплики
        "--bind_ip_all",
        "--port",
        "27019",
      ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

    #1-й шард Replica Secondary 2
  shard1_3:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard1_3
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    volumes:
      - shard1_3-data:/data/db
    command: [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1-replica-set", #название реплики
        "--bind_ip_all",
        "--port",
        "27020",
      ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

    #2-й шард Replica Primary
  shard2_1:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard2_1
    restart: always
    ports:
      - "27021:27021"
    networks:
      app-network:
        ipv4_address: 173.17.0.6
    volumes:
      - shard2_1-data:/data/db
    command: [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2-replica-set", #название реплики
        "--bind_ip_all",
        "--port",
        "27021",
      ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  #2-й шард Replica Secondary 1
  shard2_2:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard2_2
    restart: always
    ports:
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.17.0.5
    volumes:
      - shard2_2-data:/data/db
    command: [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2-replica-set", #название реплики
        "--bind_ip_all",
        "--port",
        "27022",
      ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  #2-й шард Replica Secondary 2
  shard2_3:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard2_3
    restart: always
    ports:
      - "27023:27023"
    networks:
      app-network:
        ipv4_address: 173.17.0.4
    volumes:
      - shard2_3-data:/data/db
    command: [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2-replica-set", #название реплики
        "--bind_ip_all",
        "--port",
        "27023",
      ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  #роутер
  mongos_router:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27024:27024"
    networks:
      app-network:
        ipv4_address: 173.17.0.3
    command: [
        "mongos",
        "--configdb",
        "config_server/configSrv:27017", #передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27024",
      ]
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      start_period: 10s

  #приложение
  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    networks:
      app-network:
        ipv4_address: 173.17.0.2
    environment:
      MONGODB_URL: "mongodb://mongos_router:27024"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis1:6379"

  #Кэш
  redis1:
    image: "redis:latest"
    container_name: redis1
    ports:
      - "6379"
    volumes:
      - redis1_data:/data
    networks:
      app-network:
        ipv4_address: 173.17.0.11

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/24

volumes:
  config-data:
  shard1_1-data:
  shard1_2-data:
  shard1_3-data:
  shard2_1-data:
  shard2_2-data:
  shard2_3-data:
  pymongo_api:
  redis1_data:
